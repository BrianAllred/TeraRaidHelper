@page "/"
@using RaidHelper.Data
@using System.Text
@inject PokemonService PokemonService

<PageTitle>Tera Raid Helper</PageTitle>

@if (types == null)
{
    <MudProgressCircular Color="Color.Info" Indeterminate="true" />
}
else
{
    <MudStack Justify="Justify.FlexStart" Spacing="3">
        <MudText Typo="Typo.h2" GutterBottom="true">Tera Raid Helper</MudText>
        <MudText Typo="Typo.body1" GutterBottom="true">Select the Tera Raid type and at least one natural type (the actual
            type
            of the raid pokemon).</MudText>
        <MudAutocomplete class="mb-3" @ref=teraTypeAutocomplete T="TypeModel" Label="Tera type" SearchFunc="@TypeSearch" Clearable
            SelectValueOnTab Dense OnClearButtonClick="OnTeraTypeClear" ValueChanged="OnTeraTypeChanged" />
        <MudAutocomplete class="mb-3" @ref=typeOneAutocomplete T="TypeModel" Label="Natural type one" SearchFunc="@TypeSearch" Clearable
            SelectValueOnTab Dense OnClearButtonClick="OnTypeOneClear" ValueChanged="OnTypeOneChanged" />
        <MudAutocomplete class="mb-3" @ref=typeTwoAutocomplete T="TypeModel" Label="Natural type two" SearchFunc="@TypeSearch" Clearable
            SelectValueOnTab Dense OnClearButtonClick="OnTypeTwoClear" ValueChanged="OnTypeTwoChanged" @bind-Disabled=@typeTwoAutocompleteDisabled />
        @if (recommendedOffensiveTypes == null || recommendedDefensiveTypes == null || notRecommendedOffensiveTypes == null || notRecommendedDefensiveTypes == null)
        {
            <MudText Typo="Typo.body1">Select types above...</MudText>
        }
        else
        {
            <MudStack Justify="Justify.FlexStart" Spacing="6">
                <MudGrid Justify="Justify.FlexStart" Spacing="6">
                    <MudItem xs="12" md="6">
                        <MudStack Justify="Justify.FlexStart" Spacing="3">
                            <MudText Typo="Typo.h5">
                                Recommended Offensive Types
                            </MudText>
                            @foreach (var type in recommendedOffensiveTypes)
                            {
                                <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="3" Row>
                                    <MudImage Src=@("icons/" + @type.Name + ".ico") Width="48" Height="48" />
                                    <MudText>@type.Name</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudStack Justify="Justify.FlexStart" Spacing="3">
                            <MudText Typo="Typo.h5">
                                Recommended Defensive Types
                            </MudText>
                            @foreach (var type in recommendedDefensiveTypes)
                            {
                                <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="3" Row>
                                    <MudImage Src=@("icons/" + @type.Name + ".ico") Width="48" Height="48"/>
                                    <MudText>@type.Name</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudStack Justify="Justify.FlexStart" Spacing="3">
                            <MudText Typo="Typo.h5">
                                NOT Recommended Offensive Types
                            </MudText>
                            @foreach (var type in notRecommendedOffensiveTypes)
                            {
                                <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="3" Row>
                                    <MudImage Src=@("icons/" + @type.Name + ".ico") Width="48" Height="48"/>
                                    <MudText>@type.Name</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    </MudItem>
                    <MudItem xs="12" md="6">
                        <MudStack Justify="Justify.FlexStart" Spacing="3">
                            <MudText Typo="Typo.h5">
                                NOT Recommended Defensive Types
                            </MudText>
                            @foreach (var type in notRecommendedDefensiveTypes)
                            {
                                <MudStack AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Spacing="3" Row>
                                    <MudImage Src=@("icons/" + @type.Name + ".ico") Width="48" Height="48"/>
                                    <MudText>@type.Name</MudText>
                                </MudStack>
                            }
                        </MudStack>
                    </MudItem>
                </MudGrid>
                <MudStack Justify="Justify.FlexStart" Spacing="3">
                    <MudText Typo="Typo.h4">Why?</MudText>
                    @((MarkupString)(offensiveExplanation ?? string.Empty))
                    @((MarkupString)(defensiveExplanation ?? string.Empty))
                </MudStack>
            </MudStack>
        }
    </MudStack>
}

@code {
    private TypeModel[]? recommendedOffensiveTypes;
    private TypeModel[]? notRecommendedOffensiveTypes;
    private TypeModel[]? recommendedDefensiveTypes;
    private TypeModel[]? notRecommendedDefensiveTypes;
    private TypeModel? selectedTeraType;
    private TypeModel? selectedNaturalTypeOne;
    private TypeModel? selectedNaturalTypeTwo;

#pragma warning disable CS8618 // refs from html
    private MudAutocomplete<TypeModel> teraTypeAutocomplete;
    private MudAutocomplete<TypeModel> typeOneAutocomplete;
    private MudAutocomplete<TypeModel> typeTwoAutocomplete;
#pragma warning disable CS8618

    private string? offensiveExplanation;
    private string? defensiveExplanation;
    private Dictionary<int, TypeModel> types = new(); 
    private bool typeTwoAutocompleteDisabled = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadTypes();
    }

    private async Task<IEnumerable<TypeModel>> TypeSearch(string value)
    {
        if (types == null)
        {
            await LoadTypes();
        }

#pragma warning disable CS8602 // types literally can't be null here
        if (string.IsNullOrWhiteSpace(value))
        {
            return types.Values;
        }

        return types.Values.Where(type => type.Name?.Contains(value, StringComparison.InvariantCultureIgnoreCase) ?? false);
#pragma warning restore CS8602
    }

    private async Task LoadTypes()
    {
        var typeModels = await PokemonService.GetTypesAsync();

        types[0] = new TypeModel { Name = "None" };

        foreach (var type in typeModels)
        {
            types[type.Id] = type;
        }

        selectedTeraType = types[0];
        selectedNaturalTypeOne = types[0];
        selectedNaturalTypeTwo = types[0];

        await teraTypeAutocomplete.SelectOption(types[0]);
        await typeOneAutocomplete.SelectOption(types[0]);
        await typeTwoAutocomplete.SelectOption(types[0]);

        await teraTypeAutocomplete.FocusAsync();
    }

    private void OnTeraTypeClear()
    {
        if (selectedTeraType == types[0]) return;

        selectedTeraType = types[0];
        teraTypeAutocomplete.SelectOption(selectedTeraType);
    }

    private void OnTypeOneClear()
    {
        if (selectedNaturalTypeOne == types[0]) return;

        selectedNaturalTypeOne = types[0];
        typeOneAutocomplete.SelectOption(selectedNaturalTypeOne);
    }

    private void OnTypeTwoClear()
    {
        if (selectedNaturalTypeTwo == types[0]) return;

        selectedNaturalTypeTwo = types[0];
        typeTwoAutocomplete.SelectOption(selectedNaturalTypeTwo);
    }

    private async Task OnTeraTypeChanged(TypeModel model)
    {
        selectedTeraType = model;
        await GetRecommendedOffensiveTypes();
    }

    private async Task OnTypeOneChanged(TypeModel model)
    {
        selectedNaturalTypeOne = model;
        if (selectedNaturalTypeOne == types[0])
        {
            typeTwoAutocompleteDisabled = true;
            await typeTwoAutocomplete.SelectOption(types[0]);
            selectedNaturalTypeTwo = types[0];
            return;
        }
        else
        {
            typeTwoAutocompleteDisabled = false;
        }

        await GetRecommendedDefensiveTypes();
    }

    private async Task OnTypeTwoChanged(TypeModel model)
    {
        selectedNaturalTypeTwo = model;
        await GetRecommendedDefensiveTypes();
    }

    private async Task GetRecommendedOffensiveTypes()
    {
        if (selectedTeraType != null && selectedTeraType != types[0])
        {
            recommendedOffensiveTypes = await PokemonService.GetGoodOffensiveTypes(selectedTeraType);
            notRecommendedOffensiveTypes = await PokemonService.GetBadOffensiveTypes(selectedTeraType);
            GenerateOffensiveExplanation();
        }
    }

    private async Task GetRecommendedDefensiveTypes()
    {
        if (selectedNaturalTypeOne != null && selectedNaturalTypeTwo != null && selectedNaturalTypeOne != types[0])
        {
            recommendedDefensiveTypes = await PokemonService.GetGoodDefensiveTypes(selectedNaturalTypeOne,
            selectedNaturalTypeTwo);
            notRecommendedDefensiveTypes = await PokemonService.GetBadDefensiveTypes(selectedNaturalTypeOne,
            selectedNaturalTypeTwo);
            GenerateDefensiveExplanation();
        }
    }

    private void GenerateOffensiveExplanation()
    {
        if (recommendedOffensiveTypes == null) return;

        var explanationBuilder = new StringBuilder("<p class='markup'>The offensive type");
        if (recommendedOffensiveTypes.Length > 1)
        {
            explanationBuilder.Append($"s <b>{string.Join(", ", recommendedOffensiveTypes.Select(type => type.Name))}</b> are");
        }
        else
        {
            explanationBuilder.Append($" <b>{recommendedOffensiveTypes[0].Name}</b> is");
        }

        explanationBuilder.Append($" recommended because the selected Tera type <b>{selectedTeraType?.Name ?? string.Empty}</b> takes <b>double damage</b> from ");

        if (recommendedOffensiveTypes.Length > 1)
        {
            explanationBuilder.Append("them. ");
        }
        else
        {
            explanationBuilder.Append("it. ");
        }

        if (notRecommendedOffensiveTypes != null && notRecommendedOffensiveTypes.Length > 0)
        {
            explanationBuilder.Append(GenerateBadOffensiveExplanation());
        }

        explanationBuilder.Append(" Try to bring moves that match the recommended offensive types. For higher level raids, also try to match Pokemon types to benefit from <b><a href='https://bulbapedia.bulbagarden.net/wiki/Same-type_attack_bonus'>STAB</a></b>.");

        explanationBuilder.Append("</p>");
        offensiveExplanation = explanationBuilder.ToString();
    }

    private string GenerateBadOffensiveExplanation()
    {
        if (notRecommendedOffensiveTypes == null) return string.Empty;
        var explanationBuilder = new StringBuilder();

        var noEffectTypes = notRecommendedOffensiveTypes.Intersect(selectedTeraType?.ImmuneTo ?? new()).ToArray();

        if (noEffectTypes.Length > 0)
        {
            explanationBuilder.Append("The offensive type");
            if (noEffectTypes.Length > 1)
            {
                explanationBuilder.Append($"s <b>{string.Join(", ", noEffectTypes.Select(type => type.Name))}</b> are");
            }
            else
            {
                explanationBuilder.Append($" <b>{noEffectTypes[0].Name}</b> is");
            }

            explanationBuilder.Append($" <b>not</b> recommended because the selected Tera type <b>{selectedTeraType?.Name ?? string.Empty}</b> takes <b>no damage</b> from ");

            if (noEffectTypes.Length > 1)
            {
                explanationBuilder.Append("them. ");
            }
            else
            {
                explanationBuilder.Append("it. ");
            }
        }

        var halfDamageTypes = notRecommendedOffensiveTypes.Intersect(selectedTeraType?.ResistantTo ?? new()).ToArray();

        if (halfDamageTypes.Length > 0)
        {
            explanationBuilder.Append("The offensive type");
            if (halfDamageTypes.Length > 1)
            {
                explanationBuilder.Append($"s <b>{string.Join(", ", halfDamageTypes.Select(type => type.Name))}</b> are");
            }
            else
            {
                explanationBuilder.Append($" <b>{halfDamageTypes[0].Name}</b> is");
            }

            explanationBuilder.Append($" <b>not</b> recommended because the selected Tera type <b>{selectedTeraType?.Name ?? string.Empty}</b> takes <b>half damage</b> from ");

            if (halfDamageTypes.Length > 1)
            {
                explanationBuilder.Append("them. ");
            }
            else
            {
                explanationBuilder.Append("it. ");
            }
        }

        return explanationBuilder.ToString();
    }

    private void GenerateDefensiveExplanation()
    {
        if (recommendedDefensiveTypes == null) return;

        var explanationBuilder = new StringBuilder("<p class='markup'>");

        explanationBuilder.Append(GenerateTypeSpecificDefensiveExplanation(selectedNaturalTypeOne?.Id ?? 0));
        explanationBuilder.Append(GenerateTypeSpecificDefensiveExplanation(selectedNaturalTypeTwo?.Id ?? 0));
        explanationBuilder.Append(GenerateTypeSpecificBadDefensiveExplanation(selectedNaturalTypeOne?.Id ?? 0));
        explanationBuilder.Append(GenerateTypeSpecificBadDefensiveExplanation(selectedNaturalTypeTwo?.Id ?? 0));

        explanationBuilder.Append("</p>");
        defensiveExplanation = explanationBuilder.ToString();
    }

    private string GenerateTypeSpecificDefensiveExplanation(int typeId)
    {
        if (recommendedDefensiveTypes == null) return string.Empty;

        var explanationBuilder = new StringBuilder();

        var noEffectRecommended = recommendedDefensiveTypes.Intersect(types[typeId].NoEffectAgainst).ToArray();

        if (noEffectRecommended.Length > 0)
        {
            explanationBuilder.Append("The defensive type");
            if (noEffectRecommended.Length > 1)
            {
                explanationBuilder.Append($"s <b>{string.Join(", ", noEffectRecommended.Select(type => type.Name))}</b> are");
            }
            else
            {
                explanationBuilder.Append($" <b>{noEffectRecommended[0].Name}</b> is");
            }

            explanationBuilder.Append($" recommended because the selected natural type <b>{types[typeId].Name}</b> does <b>no damage</b> to ");

            if (noEffectRecommended.Length > 1)
            {
                explanationBuilder.Append("them. ");
            }
            else
            {
                explanationBuilder.Append("it. ");
            }
        }

        var notEffectiveRecommended = recommendedDefensiveTypes.Intersect(types[typeId].NotEffectiveAgainst).ToArray();

        if (notEffectiveRecommended.Length > 0)
        {
            explanationBuilder.Append("The defensive type");

            if (notEffectiveRecommended.Length > 1)
            {
                explanationBuilder.Append($"s <b>{string.Join(", ", notEffectiveRecommended.Select(type => type.Name))}</b> are");
            }
            else
            {
                explanationBuilder.Append($" <b>{notEffectiveRecommended[0].Name}</b> is");
            }

            explanationBuilder.Append($" recommended because the selected natural type <b>{types[typeId].Name}</b> does <b>half damage</b> to ");

            if (notEffectiveRecommended.Length > 1)
            {
                explanationBuilder.Append("them. ");
            }
            else
            {
                explanationBuilder.Append("it. ");
            }
        }

        return explanationBuilder.ToString();
    }

    private string GenerateTypeSpecificBadDefensiveExplanation(int typeId)
    {
        if (notRecommendedDefensiveTypes == null) return string.Empty;

        var typeSpecificBadDefensiveTypes = notRecommendedDefensiveTypes.Intersect(types[typeId].SuperEffectiveAgainst).ToArray();

        var explanationBuilder = new StringBuilder();

        if (typeSpecificBadDefensiveTypes.Length > 1)
        {
            explanationBuilder.Append("The defensive type");
            if (typeSpecificBadDefensiveTypes.Length > 1)
            {
                explanationBuilder.Append($"s <b>{string.Join(", ", typeSpecificBadDefensiveTypes.Select(type => type.Name))}</b> are");
            }
            else
            {
                explanationBuilder.Append($" <b>{typeSpecificBadDefensiveTypes[0].Name}</b> is");
            }

            explanationBuilder.Append($" <b>not</b> recommended because the selected natural type <b>{types[typeId].Name}</b> deals <b>double damage</b> to ");

            if (typeSpecificBadDefensiveTypes.Length > 1)
            {
                explanationBuilder.Append("them. ");
            }
            else
            {
                explanationBuilder.Append("it. ");
            }
        }

        return explanationBuilder.ToString();
    }
}